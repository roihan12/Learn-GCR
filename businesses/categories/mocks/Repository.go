// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	categories "echo-recipe/businesses/categories"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: categoryDomain
func (_m *Repository) Create(categoryDomain *categories.Domain) categories.Domain {
	ret := _m.Called(categoryDomain)

	var r0 categories.Domain
	if rf, ok := ret.Get(0).(func(*categories.Domain) categories.Domain); ok {
		r0 = rf(categoryDomain)
	} else {
		r0 = ret.Get(0).(categories.Domain)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *Repository) Delete(id string) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *Repository) GetAll() []categories.Domain {
	ret := _m.Called()

	var r0 []categories.Domain
	if rf, ok := ret.Get(0).(func() []categories.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]categories.Domain)
		}
	}

	return r0
}

// GetByID provides a mock function with given fields: id
func (_m *Repository) GetByID(id string) categories.Domain {
	ret := _m.Called(id)

	var r0 categories.Domain
	if rf, ok := ret.Get(0).(func(string) categories.Domain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(categories.Domain)
	}

	return r0
}

// Update provides a mock function with given fields: id, categoryDomain
func (_m *Repository) Update(id string, categoryDomain *categories.Domain) categories.Domain {
	ret := _m.Called(id, categoryDomain)

	var r0 categories.Domain
	if rf, ok := ret.Get(0).(func(string, *categories.Domain) categories.Domain); ok {
		r0 = rf(id, categoryDomain)
	} else {
		r0 = ret.Get(0).(categories.Domain)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
